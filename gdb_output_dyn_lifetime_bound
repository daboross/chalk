Script started on 2020-09-26 22:50:40-07:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="220" LINES="44"]
[1m[7m%[27m[1m[0m


[0m[27m[24m[J~/proj/rust/chalk/
$ [K[?2004h

[A[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~/proj/rust/chalk/[00m
$ [Kgdb /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649[73D[4P[69C --test dyn_lifetime_bound[95Dgdb /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649                      [22D[?2004l

[35;1m[35;1mGNU gdb [m[35;1m(GDB) [m[35;1mFedora 9.1-6.fc32[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649[m...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649.
Use `info auto-load python-scripts [REGEXP]' to list them.
(gdb) set args --test dyn_lifetime_bound
(gdb) break chalk_solve::infer::
chalk_solve::infer::InferenceTable<I>::commit
chalk_solve::infer::InferenceTable<I>::from_canonical
chalk_solve::infer::InferenceTable<I>::new
chalk_solve::infer::InferenceTable<I>::new_universe
chalk_solve::infer::InferenceTable<I>::new_variable
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow
chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::probe_var
chalk_solve::infer::InferenceTable<I>::rollback_to
chalk_solve::infer::InferenceTable<I>::snapshot
chalk_solve::infer::InferenceTable<I>::universe_of_unbound_var
chalk_solve::infer::canonicalize::<impl chalk_solve::infer::InferenceTable<I>>::canonicalize
chalk_solve::infer::canonicalize::Canonicalizer<I>::add
chalk_solve::infer::canonicalize::Canonicalizer<I>::add::{{closure}}
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders::{{closure}}
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders::{{closure}}::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_existentially
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_universally
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_universally::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_canonical
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_in
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_in::{{closure}}
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert_then_canonicalize
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert_then_canonicalize::{{closure}}
chalk_solve::infer::invert::Inverter<I>::new
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize::{{closure}}
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize::{{closure}}::{{closure}}
chalk_solve::infer::unify::<impl chalk_solve::infer::InferenceTable<I>>::relate
chalk_solve::infer::unify::OccursCheck<I>::new
chalk_solve::infer::unify::Unifier<I>::generalize_substitution
chalk_solve::infer::unify::Unifier<I>::generalize_substitution::{{closure}}
chalk_solve::infer::unify::Unifier<I>::new
chalk_solve::infer::unify::Unifier<I>::push_lifetime_eq_goals
--More--
[K
(gdb) break chalk_solve::infer::InferenceTable<I>::
chalk_solve::infer::InferenceTable<I>::commit                                   chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::from_canonical                           chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow
chalk_solve::infer::InferenceTable<I>::new                                      chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::new_universe                             chalk_solve::infer::InferenceTable<I>::probe_var
chalk_solve::infer::InferenceTable<I>::new_variable                             chalk_solve::infer::InferenceTable<I>::rollback_to
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow                  chalk_solve::infer::InferenceTable<I>::snapshot
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow::{{closure}}     chalk_solve::infer::InferenceTable<I>::universe_of_unbound_var
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow
(gdb) break chalk_solve::infer::InferenceTable<I>::new_variable
Breakpoint 1 at [34m0x67dd87[m: file [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m, line 86.
(gdb) run
Starting program: /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.31-4.fc32.x86_64
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib64/libthread_db.so.1[m".

running 1 test
[New Thread 0x7ffff7c4b700 (LWP 46880)]
[Switching to Thread 0x7ffff7c4b700 (LWP 46880)]

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c3dd60, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
Missing separate debuginfos, use: dnf debuginfo-install libgcc-10.2.1-1.fc32.x86_64
(gdb) continue
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c3dd60, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
test test::existential_types::dyn_lifetime_bound ... [31mFAILED(B[m

failures:

---- test::existential_types::dyn_lifetime_bound stdout ----
program { trait Foo { } trait Eq < A > { } impl < A > Eq < A > for A { } }
----------------------------------------------------------------------
goal { forall < 'a > { forall < 'b > { dyn Foo + 'a : Eq < dyn Foo + 'b > } } }
using solver: SLG { max_size: 10, expected_answers: None }
expected:
Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!2_0 }, InEnvironment { environment: Env([]), goal: '!2_0: '!1_0 }]
actual:
No possible solution
thread 'test::existential_types::dyn_lifetime_bound' panicked at 'assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
[31m<[0m[31m"[0m[1;48;5;52;31mUnique;[0m[31ms[0m[1;48;5;52;31mub[0m[31ms[0m[1;48;5;52;31mt[0m[31mi[0m[1;48;5;52;31mtution[],[0m[31ml[0m[1;48;5;52;31mif[0m[31me[0m[1;48;5;52;31mtimecon[0m[31ms[0m[1;48;5;52;31mtraints[InEnvir[0m[31mo[0m[1;48;5;52;31mnment{environment:Env([]),goa[0m[31ml[0m[1;48;5;52;31m:\'!1_0:\'!2_0},InEnvironmen[0m[31mt[0m[1;48;5;52;31m{env[0m[31mi[0m[1;48;5;52;31mr[0m[31mon[0m[1;48;5;52;31mment:Env([]),goal:\'!2_0:\'!1_0}][0m[31m"[0m
[32m>[0m[32m"[0m[1;48;5;22;32mNopo[0m[32ms[0m[32ms[0m[32mi[0m[1;48;5;22;32mb[0m[32ml[0m[32me[0m[32ms[0m[32mo[0m[32ml[0m[1;48;5;22;32mu[0m[32mt[0m[32mi[0m[32mon[0m[32m"[0m

', tests/test_util.rs:52:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::existential_types::dyn_lifetime_bound

test result: [31mFAILED(B[m. 0 passed; 1 failed; 0 ignored; 0 measured; 435 filtered out

[Thread 0x7ffff7c4b700 (LWP 46880) exited]
[Inferior 1 (process 46876) exited with code 0145]
(gdb)
The program is not being run.
(gdb) quit[K[K[K[Kquit
[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hCCHALK_DEBUG=debug[?2004l

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hCHALK_DEBUG=debug[17Dgdb /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649[73D[4P[69C --test dyn_lifetime_bound[?2004l


running 1 test
test test::existential_types::dyn_lifetime_bound ... [31mFAILED(B[m

failures:

---- test::existential_types::dyn_lifetime_bound stdout ----
program { trait Foo { } trait Eq < A > { } impl < A > Eq < A > for A { } }
----------------------------------------------------------------------
goal { forall < 'a > { forall < 'b > { dyn Foo + 'a : Eq < dyn Foo + 'b > } } }
using solver: SLG { max_size: 10, expected_answers: None }
expected:
Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!2_0 }, InEnvironment { environment: Env([]), goal: '!2_0: '!1_0 }]
actual:
No possible solution
thread 'test::existential_types::dyn_lifetime_bound' panicked at 'assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
[31m<[0m[31m"[0m[1;48;5;52;31mUnique;[0m[31ms[0m[1;48;5;52;31mub[0m[31ms[0m[1;48;5;52;31mt[0m[31mi[0m[1;48;5;52;31mtution[],[0m[31ml[0m[1;48;5;52;31mif[0m[31me[0m[1;48;5;52;31mtimecon[0m[31ms[0m[1;48;5;52;31mtraints[InEnvir[0m[31mo[0m[1;48;5;52;31mnment{environment:Env([]),goa[0m[31ml[0m[1;48;5;52;31m:\'!1_0:\'!2_0},InEnvironmen[0m[31mt[0m[1;48;5;52;31m{env[0m[31mi[0m[1;48;5;52;31mr[0m[31mon[0m[1;48;5;52;31mment:Env([]),goal:\'!2_0:\'!1_0}][0m[31m"[0m
[32m>[0m[32m"[0m[1;48;5;22;32mNopo[0m[32ms[0m[32ms[0m[32mi[0m[1;48;5;22;32mb[0m[32ml[0m[32me[0m[32ms[0m[32mo[0m[32ml[0m[1;48;5;22;32mu[0m[32mt[0m[32mi[0m[32mon[0m[32m"[0m

', tests/test_util.rs:52:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::existential_types::dyn_lifetime_bound

test result: [31mFAILED(B[m. 0 passed; 1 failed; 0 ignored; 0 measured; 435 filtered out

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004h/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound[95DCHALK_DEBUG=debug                                                                              [78D=debug =debug =debug =debug =debug L=debugO=debugG=debug[?2004l

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hCHALK_LOG=debug[15DeCHALK_LOG=debug[15DerCHALK_LOG=debug[15DxCHALK_LOG=debug[15D[P[15C [16De[P[15C [16DexCHALK_LOG=debug[15DpCHALK_LOG=debug[15DoCHALK_LOG=debug[15DrCHALK_LOG=debug[15DtCHALK_LOG=debug[15D CHALK_LOG=debug[15D[?2004l

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hexport CHALK_LOG=debug[22D[7P[15C       [15D/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound[?2004l


running 1 test
test test::existential_types::dyn_lifetime_bound ... [31mFAILED(B[m

failures:

---- test::existential_types::dyn_lifetime_bound stdout ----
program { trait Foo { } trait Eq < A > { } impl < A > Eq < A > for A { } }
----------------------------------------------------------------------
goal { forall < 'a > { forall < 'b > { dyn Foo + 'a : Eq < dyn Foo + 'b > } } }
using solver: SLG { max_size: 10, expected_answers: None }
expected:
Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!2_0 }, InEnvironment { environment: Env([]), goal: '!2_0: '!1_0 }]
actual:
No possible solution
thread 'test::existential_types::dyn_lifetime_bound' panicked at 'assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
[31m<[0m[31m"[0m[1;48;5;52;31mUnique;[0m[31ms[0m[1;48;5;52;31mub[0m[31ms[0m[1;48;5;52;31mt[0m[31mi[0m[1;48;5;52;31mtution[],[0m[31ml[0m[1;48;5;52;31mif[0m[31me[0m[1;48;5;52;31mtimecon[0m[31ms[0m[1;48;5;52;31mtraints[InEnvir[0m[31mo[0m[1;48;5;52;31mnment{environment:Env([]),goa[0m[31ml[0m[1;48;5;52;31m:\'!1_0:\'!2_0},InEnvironmen[0m[31mt[0m[1;48;5;52;31m{env[0m[31mi[0m[1;48;5;52;31mr[0m[31mon[0m[1;48;5;52;31mment:Env([]),goal:\'!2_0:\'!1_0}][0m[31m"[0m
[32m>[0m[32m"[0m[1;48;5;22;32mNopo[0m[32ms[0m[32ms[0m[32mi[0m[1;48;5;22;32mb[0m[32ml[0m[32me[0m[32ms[0m[32mo[0m[32ml[0m[1;48;5;22;32mu[0m[32mt[0m[32mi[0m[32mon[0m[32m"[0m

', tests/test_util.rs:52:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::existential_types::dyn_lifetime_bound

test result: [31mFAILED(B[m. 0 passed; 1 failed; 0 ignored; 0 measured; 435 filtered out

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004h/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound[?2004l

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hhhsgr  h  

bck-i-search: _[K[A[13Dexport [4mC[24mHALK_LOG=debug[1B[10DC_[A[4mC[4mH[24m[1B[4CH_[A[8D[1C[4mH[4mA[24m[1B[4CA_[A[9D[2C[4mA[4mL[24m[1B[4CL_[A[10D[3C[4mL[4mK[24m[1B[4CK_[A[11D[4C[4mK[4m_[24m[1B[5C_[A[12D[7P[15C       [22D[6CDEBUG=debug[17D[24me[24mx[24mp[24mo[24mr[24mt [4mC[4mH[4mA[4mL[4mK[4m_[24mDEBUG=debug[17D[24mC[24mH[24mA[24mL[24mK[24m_[1B
[K[A[9C[?2004l[1B
[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004hexport CHALK_DEBUG=debug[24D/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound[?2004l


running 1 test
[1;34mDEBUG[0m trait_datum=TraitDatum { id: TraitId(#0), binders: for[type] TraitDatumBound { where_clauses: [] }, flags: TraitFlags { auto: false, marker: false, upstream: false, fundamental: false, non_enumerable: false, coinductive: false }, associated_ty_ids: [], well_known: None }
[1;34mDEBUG[0m trait_datum=TraitDatum { id: TraitId(#1), binders: for[type, type] TraitDatumBound { where_clauses: [] }, flags: TraitFlags { auto: false, marker: false, upstream: false, fundamental: false, non_enumerable: false, coinductive: false }, associated_ty_ids: [], well_known: None }
[1;32mlower_impl[0m[1;32m{[0mimpl_id=ImplId(#2)[1;32m}[0m
  [2m0[0m[2mms[0m [1;34mDEBUG[0m trait_ref=SeparatorTraitRef(?)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m where_clauses=SeparatorTraitRef(?)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m associated_ty_value_ids=[]
[1;32mperform_orphan_check[0m[1;32m{[0mimpl_id=ImplId(#2)[1;32m}[0m
  [2m0[0m[2mms[0m [1;34mDEBUG[0m impl_datum=ImplDatum { polarity: Positive, binders: for<type> ImplDatumBound { trait_ref: ^0.0 as Eq<^0.0>, where_clauses: [] }, impl_type: Local, associated_ty_value_ids: [] }
  [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
      environment: Env([]),
      goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
  }[1;32m}[0m
  [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
      value: InEnvironment {
          environment: Env([]),
          goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
      },
      binders: [],
  }[1;32m}[0m
  [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) } }, binders: [] }, universes: 1 }[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }, table=TableIndex(0)
    [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m0[0m[2mms[0m [1;32m INFO[0m pushing initial strand, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [Positive(InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) })], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }
    [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
        subst: [],
        ambiguous: false,
        constraints: [],
        subgoals: [
            Positive(
                InEnvironment {
                    environment: Env([]),
                    goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                },
            ),
        ],
        delayed_subgoals: [],
        answer_time: TimeStamp {
            clock: 0,
        },
        floundered_subgoals: [],
    }[1;32m}[0m
  [1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }
    [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [
                Positive(
                    InEnvironment {
                        environment: Env([]),
                        goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                    },
                ),
            ],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) })[1;32m}[0m
      [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
          environment: Env([]),
          goal: LocalImplAllowed(!1_0: Eq<!1_0>),
      }[1;32m}[0m
      [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: LocalImplAllowed(!1_0: Eq<!1_0>),
          },
          binders: [],
      }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
      [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
        [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
            canonical: Canonical {
                value: InEnvironment {
                    environment: Env([]),
                    goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                },
                binders: [],
            },
            universes: 2,
        }, table=TableIndex(1)
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
        [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=LocalImplAllowed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=LocalImplAllowed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
            [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
          [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)]
        [2m0[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)
        [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=LocalImplAllowed(!1_0: Eq<!1_0>), clause=for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1
          [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
          [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=LocalImplAllowed(?0: Eq<?1>), conditions=(), constraints=[]
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=LocalImplAllowed(!1_0: Eq<!1_0>), b=LocalImplAllowed(?0: Eq<?1>)[1;32m}[0m
            [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=LocalImplAllowed(!1_0: Eq<!1_0>), b=LocalImplAllowed(?0: Eq<?1>)[1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
              [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
                [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                  [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
              [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
              [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
                [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                  [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
        [2m2[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        }
        [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        }[1;32m}[0m
    [2m3[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
    [2m3[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m3[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m3[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [2m3[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
    [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
        subst: [],
        constraints: [],
        delayed_subgoals: [],
    }[1;32m}[0m
    [2m3[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(1), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
    [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
      [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [2m4[0m[2mms[0m [1;34mDEBUG[0m answer is available
    [2m4[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [
                Positive(
                    InEnvironment {
                        environment: Env([]),
                        goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                    },
                ),
            ],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: Some(
            SelectedSubgoal {
                subgoal_index: 0,
                subgoal_table: TableIndex(1),
                answer_index: AnswerIndex(0),
                universe_map: UniverseMap {
                    universes: [
                        U0,
                        U1,
                    ],
                },
            },
        ),
    }
    [2m4[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
    [2m4[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
    [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
    [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }
    [2m4[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
    [2m4[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 1,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [2m4[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
    [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
        subst: [],
        constraints: [],
        delayed_subgoals: [],
    }[1;32m}[0m
    [2m4[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(0), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
    [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
      [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) } }, binders: [] }, universes: 1 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [2m5[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m6[0m[2mms[0m [1;34mDEBUG[0m answer=CompleteAnswer { subst: Canonical { value: ConstrainedSubst { subst: [], constraints: [] }, binders: [] }, ambiguous: false }
  [1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(1)[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
  [2m6[0m[2mms[0m [1;34mDEBUG[0m overlaps = true
[1;34mDEBUG[0m input_types=[]
[1;34mDEBUG[0m WF trait goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } }
[1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
    environment: Env([]),
    goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
}[1;32m}[0m
[1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
    value: InEnvironment {
        environment: Env([]),
        goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
    },
    binders: [],
}[1;32m}[0m
[1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } } }, binders: [] }, universes: 1 }[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }, table=TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m0[0m[2mms[0m [1;32m INFO[0m pushing initial strand, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [Positive(InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) })], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: WellFormed(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: WellFormed(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(1)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=WellFormed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=WellFormed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)]
      [2m0[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=WellFormed(!1_0: Eq<!1_0>), clause=for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
        [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=WellFormed(?0: Eq<?1>), conditions=(Implemented(?0: Eq<?1>)), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=WellFormed(!1_0: Eq<!1_0>), b=WellFormed(?0: Eq<?1>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=WellFormed(!1_0: Eq<!1_0>), b=WellFormed(?0: Eq<?1>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
      [2m2[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?0, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?1, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
  [2m3[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m3[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m3[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m3[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: Implemented(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: Implemented(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: Implemented(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(2)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=Implemented(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=Implemented(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type> (^0.0 as Eq<^0.0>, [])[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=(^0.0 as Eq<^0.0>, [])
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type> Implemented(^0.0: Eq<^0.0>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>), for<type> Implemented(^0.0: Eq<^0.0>)]
      [2m1[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(!1_0: Eq<!1_0>), clause=for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
        [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?1>), conditions=(FromEnv(?0: Eq<?1>)), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
      [2m2[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?0, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?1, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
      [2m3[0m[2mms[0m [1;32m INFO[0m program clause = for<type> Implemented(^0.0: Eq<^0.0>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(!1_0: Eq<!1_0>), clause=for<type> Implemented(^0.0: Eq<^0.0>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1
        [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?0>), conditions=(), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
      [2m4[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
  [2m8[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m8[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m8[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m8[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: FromEnv(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: FromEnv(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: FromEnv(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(3)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=FromEnv(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=FromEnv(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[]
  [2m9[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(3) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(3), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m9[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(3)
  [2m9[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m9[0m[2mms[0m [1;34mDEBUG[0m discarding strand because positive literal
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: Implemented(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(1),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m12[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m12[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m12[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m12[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(2),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m12[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m12[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m12[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m12[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m12[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m13[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(2), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m13[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m13[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(2),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m13[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m13[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }
  [2m14[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
  [2m14[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 1,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m14[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m14[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(1), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m14[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m14[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(1),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m14[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m14[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }
  [2m15[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
  [2m15[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 1,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m15[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m15[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(0), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } } }, binders: [] }, universes: 1 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m15[0m[2mms[0m [1;34mDEBUG[0m answer is available
[1;34mDEBUG[0m answer=CompleteAnswer { subst: Canonical { value: ConstrainedSubst { subst: [], constraints: [] }, binders: [] }, ambiguous: false }
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(1)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
[1;34mDEBUG[0m created new universe: U1
[1;34mDEBUG[0m created new universe: U2
[1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
    environment: Env([]),
    goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
}[1;32m}[0m
[1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
    value: InEnvironment {
        environment: Env([]),
        goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
    },
    binders: [],
}[1;32m}[0m
[1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>) }, binders: [] }, universes: 3 }[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
          },
          binders: [],
      },
      universes: 3,
  }, table=TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U2
  [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), binders=[][1;32m}[0m
    [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), binders=[][1;32m}[0m
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<type> (^0.0 as Eq<^0.0>, [])[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=(^0.0 as Eq<^0.0>, [])
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type> Implemented(^0.0: Eq<^0.0>))
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<> dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
        [1;32mpush_binders[0m[1;32m{[0mbinders=for<> Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo)[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m value=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo)
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<> dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0 as Foo[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0 as Foo
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<> Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo))
    [2m1[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>), for<type> Implemented(^0.0: Eq<^0.0>)]
  [2m2[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)
  [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), clause=for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U2
    [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U2
    [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?1>), conditions=(FromEnv(?0: Eq<?1>)), constraints=[]
    [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
      [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, ?0
        [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, b=?0[1;32m}[0m
          [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
            [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
              [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?2, ui=U2
            [1;32mgeneralize_substitution[0m[1;32m{[0msubstitution=[?0 := ^1.0], universe_index=U2[1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?3, ui=U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to dyn for<type> [for<> Implemented(?3: Foo)] + '?2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to dyn for<type> [for<> Implemented(?3: Foo)] + '?2
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(?3: Foo)] + '?2, b=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
              [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?3: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?3: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U3
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?4, ui=U3
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(?4: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(?4: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U4
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, ?4
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=?4[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U5
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, ?4
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=?4[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new universe: U6
                  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?5, ui=U6
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U7
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, !6_0
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=!6_0[1;32m}[0m
                        [1;32mrelate_var_ty[0m[1;32m{[0mvar=?3, ty=!6_0[1;32m}[0m
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !6_0
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m OccursCheck aborting because self.universe_index (U2) < universe.ui (U6)
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m failed to fold !6_0
            [2m3[0m[2mms[0m [1;34mDEBUG[0m relate_ty_ty failed (no solution)
  [2m6[0m[2mms[0m [1;32m INFO[0m program clause = for<type> Implemented(^0.0: Eq<^0.0>)
  [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), clause=for<type> Implemented(^0.0: Eq<^0.0>)[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U2
    [2m0[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?0>), conditions=(), constraints=[]
    [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
      [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, ?0
        [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, b=?0[1;32m}[0m
          [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
            [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
              [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U2
            [1;32mgeneralize_substitution[0m[1;32m{[0msubstitution=[?0 := ^1.0], universe_index=U2[1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?2, ui=U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to dyn for<type> [for<> Implemented(?2: Foo)] + '?1
            [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to dyn for<type> [for<> Implemented(?2: Foo)] + '?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(?2: Foo)] + '?1, b=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
              [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?2: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?2: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U3
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?3, ui=U3
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(?3: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(?3: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U4
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, ?3
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=?3[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U5
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, ?3
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=?3[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new universe: U6
                  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?4, ui=U6
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U7
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, !6_0
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=!6_0[1;32m}[0m
                        [1;32mrelate_var_ty[0m[1;32m{[0mvar=?2, ty=!6_0[1;32m}[0m
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !6_0
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m OccursCheck aborting because self.universe_index (U2) < universe.ui (U6)
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m failed to fold !6_0
            [2m3[0m[2mms[0m [1;34mDEBUG[0m relate_ty_ty failed (no solution)
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
          },
          binders: [],
      },
      universes: 3,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
test test::existential_types::dyn_lifetime_bound ... [31mFAILED(B[m

failures:

---- test::existential_types::dyn_lifetime_bound stdout ----
program { trait Foo { } trait Eq < A > { } impl < A > Eq < A > for A { } }
----------------------------------------------------------------------
goal { forall < 'a > { forall < 'b > { dyn Foo + 'a : Eq < dyn Foo + 'b > } } }
using solver: SLG { max_size: 10, expected_answers: None }
expected:
Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!2_0 }, InEnvironment { environment: Env([]), goal: '!2_0: '!1_0 }]
actual:
No possible solution
thread 'test::existential_types::dyn_lifetime_bound' panicked at 'assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
[31m<[0m[31m"[0m[1;48;5;52;31mUnique;[0m[31ms[0m[1;48;5;52;31mub[0m[31ms[0m[1;48;5;52;31mt[0m[31mi[0m[1;48;5;52;31mtution[],[0m[31ml[0m[1;48;5;52;31mif[0m[31me[0m[1;48;5;52;31mtimecon[0m[31ms[0m[1;48;5;52;31mtraints[InEnvir[0m[31mo[0m[1;48;5;52;31mnment{environment:Env([]),goa[0m[31ml[0m[1;48;5;52;31m:\'!1_0:\'!2_0},InEnvironmen[0m[31mt[0m[1;48;5;52;31m{env[0m[31mi[0m[1;48;5;52;31mr[0m[31mon[0m[1;48;5;52;31mment:Env([]),goal:\'!2_0:\'!1_0}][0m[31m"[0m
[32m>[0m[32m"[0m[1;48;5;22;32mNopo[0m[32ms[0m[32ms[0m[32mi[0m[1;48;5;22;32mb[0m[32ml[0m[32me[0m[32ms[0m[32mo[0m[32ml[0m[1;48;5;22;32mu[0m[32mt[0m[32mi[0m[32mon[0m[32m"[0m

', tests/test_util.rs:52:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::existential_types::dyn_lifetime_bound

test result: [31mFAILED(B[m. 0 passed; 1 failed; 0 ignored; 0 measured; 435 filtered out

[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004h/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound[95Dexport CHALK_DEBUG=debug                                                                       [71D[11DLOG=debug  [22D[7P[15C       [9DDEBUG=debug[17Dgdb /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649[?2004l

[35;1m[35;1mGNU gdb [m[35;1m(GDB) [m[35;1mFedora 9.1-6.fc32[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m/home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649[m...
warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
of file /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649.
Use `info auto-load python-scripts [REGEXP]' to list them.
(gdb) set args --test dyn_lifetime_bound
(gdb) break inf
chalk_ir::Const<I>::inference_var
chalk_ir::Lifetime<I>::inference_var
chalk_ir::Ty<I>::inference_var
chalk_solve::infer::InferenceTable<I>::commit
chalk_solve::infer::InferenceTable<I>::from_canonical
chalk_solve::infer::InferenceTable<I>::new
chalk_solve::infer::InferenceTable<I>::new_universe
chalk_solve::infer::InferenceTable<I>::new_variable
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow
chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::probe_var
chalk_solve::infer::InferenceTable<I>::rollback_to
chalk_solve::infer::InferenceTable<I>::snapshot
chalk_solve::infer::InferenceTable<I>::universe_of_unbound_var
chalk_solve::infer::canonicalize::<impl chalk_solve::infer::InferenceTable<I>>::canonicalize
chalk_solve::infer::canonicalize::Canonicalizer<I>::add
chalk_solve::infer::canonicalize::Canonicalizer<I>::add::{{closure}}
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders::{{closure}}
chalk_solve::infer::canonicalize::Canonicalizer<I>::into_binders::{{closure}}::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_existentially
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_universally
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_universally::{{closure}}
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_canonical
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_in
chalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_in::{{closure}}
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert_then_canonicalize
chalk_solve::infer::invert::<impl chalk_solve::infer::InferenceTable<I>>::invert_then_canonicalize::{{closure}}
chalk_solve::infer::invert::Inverter<I>::new
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize::{{closure}}
chalk_solve::infer::ucanonicalize::<impl chalk_solve::infer::InferenceTable<I>>::u_canonicalize::{{closure}}::{{closure}}
chalk_solve::infer::unify::<impl chalk_solve::infer::InferenceTable<I>>::relate
chalk_solve::infer::unify::OccursCheck<I>::new
chalk_solve::infer::unify::Unifier<I>::generalize_substitution
--More--
[K
(gdb) break inf[K[K[Kchalk_solve::infer::InferenceTable<I>::
chalk_solve::infer::InferenceTable<I>::commit                                   chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::from_canonical                           chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow
chalk_solve::infer::InferenceTable<I>::new                                      chalk_solve::infer::InferenceTable<I>::normalize_ty_shallow::{{closure}}
chalk_solve::infer::InferenceTable<I>::new_universe                             chalk_solve::infer::InferenceTable<I>::probe_var
chalk_solve::infer::InferenceTable<I>::new_variable                             chalk_solve::infer::InferenceTable<I>::rollback_to
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow                  chalk_solve::infer::InferenceTable<I>::snapshot
chalk_solve::infer::InferenceTable<I>::normalize_const_shallow::{{closure}}     chalk_solve::infer::InferenceTable<I>::universe_of_unbound_var
chalk_solve::infer::InferenceTable<I>::normalize_lifetime_shallow
(gdb) break chalk_solve::infer::InferenceTable<I>::new_variable
Breakpoint 1 at [34m0x67dd87[m: file [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m, line 86.
(gdb) run
Starting program: /home/daboross/proj/rust/chalk/target/debug/deps/lib-ebdaf2696ab0f649 --test dyn_lifetime_bound
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.31-4.fc32.x86_64
[Thread debugging using libthread_db enabled]
Using host libthread_db library "[32m/lib64/libthread_db.so.1[m".

running 1 test
[New Thread 0x7ffff7c4b700 (LWP 47001)]
c[1;34mDEBUG[0m trait_datum=TraitDatum { id: TraitId(#0), binders: for[type] TraitDatumBound { where_clauses: [] }, flags: TraitFlags { auto: false, marker: false, upstream: false, fundamental: false, non_enumerable: false, coinductive: false }, associated_ty_ids: [], well_known: None }
[1;34mDEBUG[0m trait_datum=TraitDatum { id: TraitId(#1), binders: for[type, type] TraitDatumBound { where_clauses: [] }, flags: TraitFlags { auto: false, marker: false, upstream: false, fundamental: false, non_enumerable: false, coinductive: false }, associated_ty_ids: [], well_known: None }
[1;32mlower_impl[0m[1;32m{[0mimpl_id=ImplId(#2)[1;32m}[0m
  [2m0[0m[2mms[0m [1;34mDEBUG[0m trait_ref=SeparatorTraitRef(?)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m where_clauses=SeparatorTraitRef(?)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m associated_ty_value_ids=[]
[1;32mperform_orphan_check[0m[1;32m{[0mimpl_id=ImplId(#2)[1;32m}[0m
  [2m0[0m[2mms[0m [1;34mDEBUG[0m impl_datum=ImplDatum { polarity: Positive, binders: for<type> ImplDatumBound { trait_ref: ^0.0 as Eq<^0.0>, where_clauses: [] }, impl_type: Local, associated_ty_value_ids: [] }
  [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
      environment: Env([]),
      goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
  }[1;32m}[0m
  [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
      value: InEnvironment {
          environment: Env([]),
          goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
      },
      binders: [],
  }[1;32m}[0m
  [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) } }, binders: [] }, universes: 1 }[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }, table=TableIndex(0)
    [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m0[0m[2mms[0m [1;32m INFO[0m pushing initial strand, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [Positive(InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) })], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }
    [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
        subst: [],
        ambiguous: false,
        constraints: [],
        subgoals: [
            Positive(
                InEnvironment {
                    environment: Env([]),
                    goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                },
            ),
        ],
        delayed_subgoals: [],
        answer_time: TimeStamp {
            clock: 0,
        },
        floundered_subgoals: [],
    }[1;32m}[0m
  [1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }
    [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [
                Positive(
                    InEnvironment {
                        environment: Env([]),
                        goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                    },
                ),
            ],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) })[1;32m}[0m
      [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
          environment: Env([]),
          goal: LocalImplAllowed(!1_0: Eq<!1_0>),
      }[1;32m}[0m
      [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: LocalImplAllowed(!1_0: Eq<!1_0>),
          },
          binders: [],
      }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
      [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
        [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
            canonical: Canonical {
                value: InEnvironment {
                    environment: Env([]),
                    goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                },
                binders: [],
            },
            universes: 2,
        }, table=TableIndex(1)
        [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
        [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=LocalImplAllowed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=LocalImplAllowed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
            [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
              [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
          [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)]
        [2m0[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)
        [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=LocalImplAllowed(!1_0: Eq<!1_0>), clause=for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>)[1;32m}[0m
[Switching to Thread 0x7ffff7c4b700 (LWP 47001)]

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c3dd60, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
Missing separate debuginfos, use: dnf debuginfo-install libgcc-10.2.1-1.fc32.x86_64
(gdb) continue
Continuing.
          [2m5066[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c3dd60, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
          [2m6089[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
          [2m6089[0m[2mms[0m [1;34mDEBUG[0m consequence=LocalImplAllowed(?0: Eq<?1>), conditions=(), constraints=[]
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=LocalImplAllowed(!1_0: Eq<!1_0>), b=LocalImplAllowed(?0: Eq<?1>)[1;32m}[0m
            [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=LocalImplAllowed(!1_0: Eq<!1_0>), b=LocalImplAllowed(?0: Eq<?1>)[1;32m}[0m
              [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
              [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
                [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                  [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                  [2m1[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
              [2m1[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
              [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
                [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                  [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
        [2m6094[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        }
        [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        }[1;32m}[0m
    [2m6095[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
    [2m6095[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m6095[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
    [2m6095[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [2m6095[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
    [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
        subst: [],
        constraints: [],
        delayed_subgoals: [],
    }[1;32m}[0m
    [2m6096[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(1), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
    [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
      [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [2m6096[0m[2mms[0m [1;34mDEBUG[0m answer is available
    [2m6096[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [
                Positive(
                    InEnvironment {
                        environment: Env([]),
                        goal: LocalImplAllowed(!1_0: Eq<!1_0>),
                    },
                ),
            ],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 0,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: Some(
            SelectedSubgoal {
                subgoal_index: 0,
                subgoal_table: TableIndex(1),
                answer_index: AnswerIndex(0),
                universe_map: UniverseMap {
                    universes: [
                        U0,
                        U1,
                    ],
                },
            },
        ),
    }
    [2m6097[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
    [2m6097[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
    [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
    [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: LocalImplAllowed(!1_0: Eq<!1_0>) }
    [2m6098[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
    [2m6098[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
        ex_clause: ExClause {
            subst: [],
            ambiguous: false,
            constraints: [],
            subgoals: [],
            delayed_subgoals: [],
            answer_time: TimeStamp {
                clock: 1,
            },
            floundered_subgoals: [],
        },
        selected_subgoal: None,
    }
    [2m6098[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
    [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
        subst: [],
        constraints: [],
        delayed_subgoals: [],
    }[1;32m}[0m
    [2m6098[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(0), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
    [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
      [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
      [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) } }, binders: [] }, universes: 1 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
    [2m6098[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m6099[0m[2mms[0m [1;34mDEBUG[0m answer=CompleteAnswer { subst: Canonical { value: ConstrainedSubst { subst: [], constraints: [] }, binders: [] }, ambiguous: false }
  [1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(1)[1;32m}[0m
    [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
        canonical: Canonical {
            value: InEnvironment {
                environment: Env([]),
                goal: ForAll<type> { LocalImplAllowed(^0.0: Eq<^0.0>) },
            },
            binders: [],
        },
        universes: 1,
    }
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
    [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
  [2m6100[0m[2mms[0m [1;34mDEBUG[0m overlaps = true
[1;34mDEBUG[0m input_types=[]
[1;34mDEBUG[0m WF trait goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } }
[1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
    environment: Env([]),
    goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
}[1;32m}[0m
[1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
    value: InEnvironment {
        environment: Env([]),
        goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
    },
    binders: [],
}[1;32m}[0m
[1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } } }, binders: [] }, universes: 1 }[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }, table=TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m0[0m[2mms[0m [1;32m INFO[0m pushing initial strand, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [Positive(InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) })], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: WellFormed(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: WellFormed(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(1)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=WellFormed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=WellFormed(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
        [2m1[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)]
      [2m1[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=WellFormed(!1_0: Eq<!1_0>), clause=for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>)[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
        [2m2340[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
        [2m3780[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
        [2m3780[0m[2mms[0m [1;34mDEBUG[0m consequence=WellFormed(?0: Eq<?1>), conditions=(Implemented(?0: Eq<?1>)), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=WellFormed(!1_0: Eq<!1_0>), b=WellFormed(?0: Eq<?1>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=WellFormed(!1_0: Eq<!1_0>), b=WellFormed(?0: Eq<?1>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m1[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
      [2m3785[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?0, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?1, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
  [2m3787[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m3787[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m3787[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m3787[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: Implemented(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: Implemented(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: Implemented(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(2)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=Implemented(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=Implemented(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<type> (^0.0 as Eq<^0.0>, [])[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=(^0.0 as Eq<^0.0>, [])
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type> Implemented(^0.0: Eq<^0.0>))
        [2m2[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>), for<type> Implemented(^0.0: Eq<^0.0>)]
      [2m2[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(!1_0: Eq<!1_0>), clause=for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
        [2m1279[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
        [2m2223[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U1
        [2m2223[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?1>), conditions=(FromEnv(?0: Eq<?1>)), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m1[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?1[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?1, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?1 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
      [2m2229[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(?0: Eq<?1>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?0, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
        [1;32mfold_inference_ty[0m[1;32m{[0mvar=?1, kind=General, outer_binder=^0[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m bound to !1_0
      [2m2230[0m[2mms[0m [1;32m INFO[0m program clause = for<type> Implemented(^0.0: Eq<^0.0>)
      [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(!1_0: Eq<!1_0>), clause=for<type> Implemented(^0.0: Eq<^0.0>)[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c419c0, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
        [2m1619[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U1
        [2m1619[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?0>), conditions=(), constraints=[]
        [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
          [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(!1_0: Eq<!1_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=?0[1;32m}[0m
              [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U1
                [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m just generalizing to the ty itself: !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to !1_0
                [2m0[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to !1_0
                [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
                [2m0[0m[2mms[0m [1;34mDEBUG[0m generalized var !1_0 related to !1_0
            [2m1[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, !1_0, ?0
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=!1_0, b=!1_0[1;32m}[0m
      [2m3851[0m[2mms[0m [1;32m INFO[0m pushing initial strand with ex-clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }
      [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      }[1;32m}[0m
  [2m7640[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m7640[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m7640[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m7641[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: FromEnv(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [1;32mget_or_create_table_for_subgoal[0m[1;32m{[0msubgoal=Positive(InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) })[1;32m}[0m
    [1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
        environment: Env([]),
        goal: FromEnv(!1_0: Eq<!1_0>),
    }[1;32m}[0m
    [1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
        value: InEnvironment {
            environment: Env([]),
            goal: FromEnv(!1_0: Eq<!1_0>),
        },
        binders: [],
    }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m ucanonical_subgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, universe_map=UniverseMap { universes: [U0, U1] }
    [1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }[1;32m}[0m
      [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
          canonical: Canonical {
              value: InEnvironment {
                  environment: Env([]),
                  goal: FromEnv(!1_0: Eq<!1_0>),
              },
              binders: [],
          },
          universes: 2,
      }, table=TableIndex(3)
      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
      [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=FromEnv(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=FromEnv(!1_0: Eq<!1_0>), binders=[][1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m clauses=[]
  [2m7643[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(3) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(3), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: FromEnv(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m7643[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(3)
  [2m7643[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m7643[0m[2mms[0m [1;34mDEBUG[0m discarding strand because positive literal
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: Implemented(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
  [1;32mcanonicalize[0m[1;32m{[0mmessage=ExClause {
      subst: [],
      ambiguous: false,
      constraints: [],
      subgoals: [
          Positive(
              InEnvironment {
                  environment: Env([]),
                  goal: WellFormed(!1_0: Eq<!1_0>),
              },
          ),
      ],
      delayed_subgoals: [],
      answer_time: TimeStamp {
          clock: 0,
      },
      floundered_subgoals: [],
  }[1;32m}[0m
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(1),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m1[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(2),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m1[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m1[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m1[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m1[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m2[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(2), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m2[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m2[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: Implemented(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(2),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m3[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(2) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(2), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m3[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: Implemented(!1_0: Eq<!1_0>) }
  [2m4[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
  [2m4[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 1,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m4[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m4[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(1), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m5[0m[2mms[0m [1;34mDEBUG[0m answer is available
  [2m5[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [
              Positive(
                  InEnvironment {
                      environment: Env([]),
                      goal: WellFormed(!1_0: Eq<!1_0>),
                  },
              ),
          ],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 0,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: Some(
          SelectedSubgoal {
              subgoal_index: 0,
              subgoal_table: TableIndex(1),
              answer_index: AnswerIndex(0),
              universe_map: UniverseMap {
                  universes: [
                      U0,
                      U1,
                  ],
              },
          },
      ),
  }
  [2m5[0m[2mms[0m [1;34mDEBUG[0m table selection TableIndex(1) with goal: UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }, subgoal_table=TableIndex(1), goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes: 2 }
  [2m6[0m[2mms[0m [1;32m INFO[0m answer cached = Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mmap_from_canonical[0m[1;32m{[0mcanonical_value=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, universes=[U0, U1][1;32m}[0m
  [1;32mapply_answer_subst[0m[1;32m{[0munification_database=ChalkDatabase { }, ex_clause=ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 0 }, floundered_subgoals: [] }, selected_goal=InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, answer_table_goal=Canonical { value: InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }, binders: [] }, canonical_answer_subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m selected_goal=InEnvironment { environment: Env([]), goal: WellFormed(!1_0: Eq<!1_0>) }
  [2m7[0m[2mms[0m [1;34mDEBUG[0m merged answer into current strand, strand=Strand { ex_clause: ExClause { subst: [], ambiguous: false, constraints: [], subgoals: [], delayed_subgoals: [], answer_time: TimeStamp { clock: 1 }, floundered_subgoals: [] }, selected_subgoal: None }
  [2m7[0m[2mms[0m [1;34mDEBUG[0m starting next strand = Strand {
      ex_clause: ExClause {
          subst: [],
          ambiguous: false,
          constraints: [],
          subgoals: [],
          delayed_subgoals: [],
          answer_time: TimeStamp {
              clock: 1,
          },
          floundered_subgoals: [],
      },
      selected_subgoal: None,
  }
  [2m7[0m[2mms[0m [1;34mDEBUG[0m no remaining subgoals for the table
  [1;32mcanonicalize[0m[1;32m{[0mmessage=AnswerSubst {
      subst: [],
      constraints: [],
      delayed_subgoals: [],
  }[1;32m}[0m
  [2m7[0m[2mms[0m [1;34mDEBUG[0m found answer, table=TableIndex(0), subst=Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, floundered=false
  [1;32mpush_answer[0m[1;32m{[0manswer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }[1;32m}[0m
    [2m0[0m[2mms[0m [1;34mDEBUG[0m pre-existing entry: None
    [2m0[0m[2mms[0m [1;32m INFO[0m new answer to table, goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } } }, binders: [] }, universes: 1 }, answer=Answer { subst: Canonical { value: AnswerSubst { subst: [], constraints: [], delayed_subgoals: [] }, binders: [] }, ambiguous: false }
  [2m7[0m[2mms[0m [1;34mDEBUG[0m answer is available
[1;34mDEBUG[0m answer=CompleteAnswer { subst: Canonical { value: ConstrainedSubst { subst: [], constraints: [] }, binders: [] }, ambiguous: false }
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(1)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: ForAll<type> { if ([]) { WellFormed(^0.0: Eq<^0.0>) } },
          },
          binders: [],
      },
      universes: 1,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
[1;34mDEBUG[0m created new universe: U1
[1;34mDEBUG[0m created new universe: U2
[1;32mcanonicalize[0m[1;32m{[0mmessage=InEnvironment {
    environment: Env([]),
    goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
}[1;32m}[0m
[1;32mu_canonicalize[0m[1;32m{[0mmessage=Canonical {
    value: InEnvironment {
        environment: Env([]),
        goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
    },
    binders: [],
}[1;32m}[0m
[1;32mget_or_create_table_for_ucanonical_goal[0m[1;32m{[0mgoal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>) }, binders: [] }, universes: 3 }[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m creating new table with goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
          },
          binders: [],
      },
      universes: 3,
  }, table=TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U1
  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U2
  [1;32mprogram_clauses_for_goal[0m[1;32m{[0menvironment=Env([]), goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), binders=[][1;32m}[0m
    [1;32mprogram_clauses_that_could_match[0m[1;32m{[0mgoal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), binders=[][1;32m}[0m
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<type, type> [][1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=[]
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> WellFormed(^0.0: Eq<^0.1>) :- Implemented(^0.0: Eq<^0.1>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> LocalImplAllowed(^0.0: Eq<^0.1>))
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>))
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<type> (^0.0 as Eq<^0.0>, [])[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=(^0.0 as Eq<^0.0>, [])
        [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<type> Implemented(^0.0: Eq<^0.0>))
      [1;32mpush_binders[0m[1;32m{[0mbinders=for<> dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m value=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
        [1;32mpush_binders[0m[1;32m{[0mbinders=for<> Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo)[1;32m}[0m
          [2m0[0m[2mms[0m [1;34mDEBUG[0m value=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo)
          [1;32mpush_binders[0m[1;32m{[0mbinders=for<> dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0 as Foo[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m value=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0 as Foo
            [2m0[0m[2mms[0m [1;34mDEBUG[0m pushed clause Some(for<> Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Foo))
    [2m1[0m[2mms[0m [1;34mDEBUG[0m clauses=[for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>), for<type> Implemented(^0.0: Eq<^0.0>)]
  [2m2[0m[2mms[0m [1;32m INFO[0m program clause = for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)
  [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), clause=for<type, type> Implemented(^0.0: Eq<^0.1>) :- FromEnv(^0.0: Eq<^0.1>)[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
    [2m2899[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U2

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
    [2m3947[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U2
    [2m3947[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?1>), conditions=(FromEnv(?0: Eq<?1>)), constraints=[]
    [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
      [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?1>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, ?0
        [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, b=?0[1;32m}[0m
          [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
            [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
              [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
            [2m2886[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?2, ui=U2
            [1;32mgeneralize_substitution[0m[1;32m{[0msubstitution=[?0 := ^1.0], universe_index=U2[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
              [2m7143[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?3, ui=U2
            [2m10030[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to dyn for<type> [for<> Implemented(?3: Foo)] + '?2
            [2m10030[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to dyn for<type> [for<> Implemented(?3: Foo)] + '?2
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(?3: Foo)] + '?2, b=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
              [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?3: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?3: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U3

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb) backtrace
#0  [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
#1  [34m0x00005555559779c2[m in [33mchalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}::{{closure}}[m () at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/instantiate.rs[m:21
#2  [34m0x000055555593a3e4[m in [33mchalk_ir::WithKind<I,T>::map_ref[m ([36mself[m=0x7ffff0711590, [36mop[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:1438
#3  [34m0x0000555555977940[m in [33mchalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst::{{closure}}[m ([36mkind[m=0x7ffff0711590)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/instantiate.rs[m:21
#4  [34m0x0000555555978413[m in [33mcore::ops::function::impls::<impl core::ops::function::FnOnce<A> for &mut F>::call_once[m ([36mself[m=0x7ffff7c3f130, [36margs[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs[m:280
#5  [34m0x0000555555babdba[m in [33mcore::option::Option<T>::map[m ([36mself[m=..., [36mf[m=0x7ffff7c3f130) at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs[m:437
#6  [34m0x0000555555c8c1c8[m in [33m<core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::next[m ([36mself[m=0x7ffff7c3f120)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs[m:844
#7  [34m0x0000555555c8d44f[m in [33m<core::iter::adapters::Map<I,F> as core::iter::traits::iterator::Iterator>::next[m ([36mself[m=0x7ffff7c3f120)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs[m:844
#8  [34m0x0000555555b83b83[m in [33m<chalk_ir::cast::Casted<IT,U> as core::iter::traits::iterator::Iterator>::next[m ([36mself[m=0x7ffff7c3f118) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/cast.rs[m:366
#9  [34m0x0000555555b7efcd[m in [33mcore::iter::traits::iterator::Iterator::try_fold[m ([36mself[m=0x7ffff7c3f118, [36minit[m=(), [36mf[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs[m:1870
#10 [34m0x0000555555c32f8f[m in [33m<core::iter::adapters::ResultShunt<I,E> as core::iter::traits::iterator::Iterator>::try_fold[m ([36mself[m=0x7ffff7c3f118, [36minit[m=(), [36mf[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs[m:2639
#11 [34m0x0000555555c4bc51[m in [33mcore::iter::traits::iterator::Iterator::find[m ([36mself[m=0x7ffff7c3f118, [36mpredicate[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs[m:2212
#12 [34m0x0000555555c2c296[m in [33m<core::iter::adapters::ResultShunt<I,E> as core::iter::traits::iterator::Iterator>::next[m ([36mself[m=0x7ffff7c3f118)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs[m:2621
#13 [34m0x0000555555e33842[m in [33m<alloc::vec::Vec<T> as alloc::vec::SpecExtend<T,I>>::from_iter[m ([36miterator[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec.rs[m:2116
#14 [34m0x0000555555e3fc6c[m in [33m<alloc::vec::Vec<T> as core::iter::traits::collect::FromIterator<T>>::from_iter[m ([36miter[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec.rs[m:2018
#15 [34m0x0000555555c526fb[m in [33mcore::iter::traits::iterator::Iterator::collect[m ([36mself[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs[m:1653
#16 [34m0x0000555555c09711[m in [33m<core::result::Result<V,E> as core::iter::traits::collect::FromIterator<core::result::Result<A,E>>>::from_iter::{{closure}}[m ([36mi[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs[m:1490
#17 [34m0x0000555555c5e848[m in [33mcore::iter::adapters::process_results[m ([36miter[m=..., [36mf[m=...) at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs[m:2610
#18 [34m0x0000555555c06f8e[m in [33m<core::result::Result<V,E> as core::iter::traits::collect::FromIterator<core::result::Result<A,E>>>::from_iter[m ([36miter[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs[m:1490
#19 [34m0x0000555555b6dac9[m in [33mcore::iter::traits::iterator::Iterator::collect[m ([36mself[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs[m:1653
#20 [34m0x0000555555b5d239[m in [33m<chalk_integration::interner::ChalkIr as chalk_ir::interner::Interner>::intern_substitution[m ([36mself[m=0x555556738248, [36mdata[m=...) at [32mchalk-integration/src/interner.rs[m:276
#21 [34m0x0000555555935a05[m in [33mchalk_ir::Substitution<I>::from_fallible[m ([36minterner[m=0x555556738248, [36melements[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:2766
#22 [34m0x0000555555937a84[m in [33mchalk_ir::Substitution<I>::from_iter[m ([36minterner[m=0x555556738248, [36melements[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:2780
#23 [34m0x0000555555bc765b[m in [33mchalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::fresh_subst[m ([36mself[m=0x7ffff7c46a80, [36minterner[m=0x555556738248, [36mbinders[m=...)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/instantiate.rs[m:18
#24 [34m0x0000555555bc7bf0[m in [33mchalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_in[m ([36mself[m=0x7ffff7c46a80, [36minterner[m=0x555556738248, [36muniverse[m=..., [36mbinders[m=..., [36marg[m=0x7ffff7c3f988)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/instantiate.rs[m:56
#25 [34m0x0000555555bca8dc[m in [33mchalk_solve::infer::instantiate::<impl chalk_solve::infer::InferenceTable<I>>::instantiate_binders_existentially[m ([36mself[m=0x7ffff7c46a80, [36minterner[m=0x555556738248, [36marg[m=0x7ffff0788758)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/instantiate.rs[m:72
[m--Type <RET> for more, q to quit, c to continue without paging--
#26 [34m0x0000555555d2331e[m in [33mchalk_solve::infer::unify::Unifier<I>::relate_binders[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff074b308, [36mb[m=0x7ffff0788758)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:273
#27 [34m0x0000555555d36012[m in [33m<chalk_solve::infer::unify::Unifier<I> as chalk_ir::zip::Zipper<I>>::zip_binders[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff074b308, [36mb[m=0x7ffff0788758)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:789
#28 [34m0x0000555555911252[m in [33m<chalk_ir::Binders<T> as chalk_ir::zip::Zip<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff074b308, [36mb[m=0x7ffff0788758)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:293
#29 [34m0x000055555590fe37[m in [33m<chalk_ir::DynTy<I> as chalk_ir::zip::Zip<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff074b308, [36mb[m=0x7ffff0788758)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:652
#30 [34m0x0000555555d1b911[m in [33mchalk_solve::infer::unify::Unifier<I>::relate_ty_ty[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff7c41e40, [36mb[m=0x7ffff7c41e10)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:190
#31 [34m0x0000555555d1f315[m in [33mchalk_solve::infer::unify::Unifier<I>::relate_var_ty[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36mvar[m=..., [36mty[m=0x7ffff7c436f8)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:540
#32 [34m0x0000555555d1adb6[m in [33mchalk_solve::infer::unify::Unifier<I>::relate_ty_ty[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff079a098, [36mb[m=0x7ffff0716818)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:147
#33 [34m0x0000555555d367dd[m in [33m<chalk_solve::infer::unify::Unifier<I> as chalk_ir::zip::Zipper<I>>::zip_tys[m ([36mself[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff079a098, [36mb[m=0x7ffff0716818)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:758
#34 [34m0x000055555590d4a2[m in [33m<chalk_ir::Ty<I> as chalk_ir::zip::Zip<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff079a098, [36mb[m=0x7ffff0716818)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:250
#35 [34m0x000055555594fcb0[m in [33mchalk_ir::_DERIVE_chalk_ir_zip_Zip_I_FOR_GenericArgData::<impl chalk_ir::zip::Zip<I> for chalk_ir::GenericArgData<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [m
    [m[36ma[m=0x7ffff079a090, [36mb[m=0x7ffff0716810) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:1368
#36 [34m0x0000555555913c1f[m in [33m<chalk_ir::GenericArg<I> as chalk_ir::zip::Zip<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff079a090, [36mb[m=0x7ffff0716810)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:485
#37 [34m0x0000555555d350ac[m in [33mchalk_ir::zip::Zipper::zip_substs[m ([36mself[m=0x7ffff7c45100, [36mambient[m=chalk_ir::Variance::Invariant, [36mvariances[m=..., [36ma[m=..., [36mb[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:65
#38 [34m0x00005555559136ca[m in [33m<chalk_ir::TraitRef<I> as chalk_ir::zip::Zip<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff0788a78, [36mb[m=0x7ffff7c457f0)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/zip.rs[m:516
#39 [34m0x0000555555948a7e[m in [33mchalk_ir::_DERIVE_chalk_ir_zip_Zip_I_FOR_WhereClause::<impl chalk_ir::zip::Zip<I> for chalk_ir::WhereClause<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [m
    [m[36ma[m=0x7ffff0788a70, [36mb[m=0x7ffff7c457e8) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:1575
#40 [34m0x0000555555945690[m in [33mchalk_ir::_DERIVE_chalk_ir_zip_Zip_I_FOR_DomainGoal::<impl chalk_ir::zip::Zip<I> for chalk_ir::DomainGoal<I>>::zip_with[m ([36mzipper[m=0x7ffff7c45100, [36mvariance[m=chalk_ir::Variance::Invariant, [m
    [m[36ma[m=0x7ffff0788a68, [36mb[m=0x7ffff7c457e0) at [32m/home/daboross/proj/rust/chalk/chalk-ir/src/lib.rs[m:1673
#41 [34m0x0000555555d334a2[m in [33mchalk_solve::infer::unify::Unifier<I>::relate[m ([36mself[m=..., [36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff0788a68, [36mb[m=0x7ffff7c457e0)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:78
#42 [34m0x0000555555bd5a04[m in [33mchalk_solve::infer::unify::<impl chalk_solve::infer::InferenceTable<I>>::relate[m ([36mself[m=0x7ffff7c46a80, [36minterner[m=0x555556738248, [36mdb[m=..., [36menvironment[m=0x7ffff7c46520, [m
    [m[36mvariance[m=chalk_ir::Variance::Invariant, [36ma[m=0x7ffff0788a68, [36mb[m=0x7ffff7c457e0) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer/unify.rs[m:28
#43 [34m0x0000555555d99114[m in [33mchalk_engine::slg::resolvent::<impl chalk_engine::context::ResolventOps<I,chalk_engine::slg::SlgContext<I>> for chalk_engine::slg::TruncatingInferenceTable<I>>::resolvent_clause[m ([m
    [m[36mself[m=0x7ffff7c46a78, [36mdb[m=..., [36minterner[m=0x555556738248, [36menvironment[m=0x7ffff7c46520, [36mgoal[m=0x7ffff0788a68, [36msubst[m=0x7ffff7c46500, [36mclause[m=0x7ffff7c468b8)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-engine/src/slg/resolvent.rs[m:91
#44 [34m0x0000555555d69f53[m in [33mchalk_engine::logic::<impl chalk_engine::forest::Forest<I,C>>::build_table[m ([36mcontext[m=0x7ffff7c48d00, [36mtable_idx[m=..., [36mgoal[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-engine/src/logic.rs[m:260
#45 [34m0x0000555555d7062d[m in [33mchalk_engine::logic::<impl chalk_engine::forest::Forest<I,C>>::get_or_create_table_for_ucanonical_goal[m ([36mself[m=0x7ffff07a5820, [36mcontext[m=0x7ffff7c48d00, [36mgoal[m=...)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-engine/src/logic.rs[m:229
#46 [34m0x0000555555d707e6[m in [33mchalk_engine::forest::Forest<I,C>::iter_answers[m ([36mself[m=0x7ffff07a5820, [36mcontext[m=0x7ffff7c48d00, [36mgoal[m=0x7ffff7c49098) at [32m/home/daboross/proj/rust/chalk/chalk-engine/src/forest.rs[m:46
#47 [34m0x0000555555c23f9e[m in [33m<chalk_engine::solve::SLGSolver<I> as chalk_solve::solve::Solver<I>>::solve[m ([36mself[m=0x7ffff07a5820, [36mprogram[m=..., [36mgoal[m=0x7ffff7c49098)[m
   [m at [32m/home/daboross/proj/rust/chalk/chalk-engine/src/solve.rs[m:40
#48 [34m0x0000555555b68581[m in [33mchalk_integration::db::ChalkDatabase::solve[m ([36mself[m=0x7ffff7c496a8, [36mgoal[m=0x7ffff7c49098) at [32mchalk-integration/src/db.rs[m:54
[m--Type <RET> for more, q to quit, c to continue without paging--
#49 [34m0x000055555570e74b[m in [33mlib::test::solve_goal::{{closure}}::{{closure}}[m () at [32mtests/test/mod.rs[m:266
#50 [34m0x00005555558018ae[m in [33mchalk_integration::tls::set_current_program::{{closure}}[m ([36mprog_cell[m=0x7ffff7c4b568) at [32m/home/daboross/proj/rust/chalk/chalk-integration/src/tls.rs[m:166
#51 [34m0x00005555557ca6d2[m in [33mstd::thread::local::LocalKey<T>::try_with[m ([36mself[m=0x555556b49e50, [36mf[m=...)[m
   [m at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs[m:265
#52 [34m0x00005555557c9ded[m in [33mstd::thread::local::LocalKey<T>::with[m ([36mself[m=0x555556b49e50, [36mf[m=...) at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs[m:241
#53 [34m0x00005555558009db[m in [33mchalk_integration::tls::set_current_program[m ([36mp[m=0x7ffff7c49718, [36mop[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-integration/src/tls.rs[m:164
#54 [34m0x000055555570f32f[m in [33mlib::test::solve_goal::{{closure}}[m () at [32mtests/test/mod.rs[m:252
#55 [34m0x000055555573ed2b[m in [33mtracing_core::dispatcher::with_default[m ([36mdispatcher[m=0x7ffff7c49ac8, [36mf[m=...) at [32m/home/daboross/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.14/src/dispatcher.rs[m:230
#56 [34m0x00005555557b4f35[m in [33mtracing::subscriber::with_default[m ([36msubscriber[m=..., [36mf[m=...) at [32m/home/daboross/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-0.1.19/src/subscriber.rs[m:24
#57 [34m0x000055555577f04c[m in [33mchalk_solve::logging::with_tracing_logs[m ([36maction[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/logging.rs[m:11
#58 [34m0x000055555576b89d[m in [33mlib::test::solve_goal[m ([36mprogram_text[m=..., [36mgoals[m=..., [36mcoherence[m=true) at [32mtests/test/mod.rs[m:223
#59 [34m0x00005555556d8876[m in [33mlib::test::existential_types::dyn_lifetime_bound[m () at [32mtests/test/existential_types.rs[m:379
#60 [34m0x0000555555730dfa[m in [33mlib::test::existential_types::dyn_lifetime_bound::{{closure}}[m () at [32mtests/test/existential_types.rs[m:378
#61 [34m0x00005555556e4f0e[m in [33mcore::ops::function::FnOnce::call_once[m () at [32m/home/daboross/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs[m:227
#62 [34m0x0000555555860673[m in [33mcore::ops::function::FnOnce::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/core/src/ops/function.rs[m:227
#63 [33mtest::__rust_begin_short_backtrace[m () at [32mlibrary/test/src/lib.rs[m:517
#64 [34m0x000055555585ebc3[m in [33m<alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/alloc/src/boxed.rs[m:1042
#65 [33m<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panic.rs[m:308
#66 [33mstd::panicking::try::do_call[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panicking.rs[m:381
#67 [33mstd::panicking::try[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panicking.rs[m:345
#68 [33mstd::panic::catch_unwind[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panic.rs[m:382
#69 [33mtest::run_test_in_process[m () at [32mlibrary/test/src/lib.rs[m:544
#70 [33mtest::run_test::run_test_inner::{{closure}}[m () at [32mlibrary/test/src/lib.rs[m:450
#71 [34m0x0000555555837276[m in [33mstd::sys_common::backtrace::__rust_begin_short_backtrace[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/sys_common/backtrace.rs[m:137
#72 [34m0x000055555583c4a5[m in [33mstd::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/thread/mod.rs[m:458
#73 [33m<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panic.rs[m:308
#74 [33mstd::panicking::try::do_call[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panicking.rs[m:381
#75 [33mstd::panicking::try[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panicking.rs[m:345
#76 [33mstd::panic::catch_unwind[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/panic.rs[m:382
#77 [33mstd::thread::Builder::spawn_unchecked::{{closure}}[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/std/src/thread/mod.rs[m:457
#78 [33mcore::ops::function::FnOnce::call_once{{vtable-shim}}[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/core/src/ops/function.rs[m:227
#79 [34m0x00005555566e4a2a[m in [33m<alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/alloc/src/boxed.rs[m:1042
#80 [33m<alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once[m () at [32m/rustc/d006f5734f49625c34d6fc33bf6b9967243abca8/library/alloc/src/boxed.rs[m:1042
#81 [33mstd::sys::unix::thread::Thread::new::thread_start[m () at [32mlibrary/std/src/sys/unix/thread.rs[m:87
#82 [34m0x00007ffff7f82432[m in [33mstart_thread[m () from [32m/lib64/libpthread.so.0[m
#83 [34m0x00007ffff7e95913[m in [33mclone[m () from [32m/lib64/libc.so.6[m
(gdb) continue
Continuing.
                  [2m7510[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?4, ui=U3
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(?4: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(?4: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U4
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, ?4
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=?4[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                      [2m1[0m[2mms[0m [1;34mDEBUG[0m created new universe: U5
                      [2m1[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, ?4
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=?4[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?3, b=?4[1;32m}[0m
                  [2m7512[0m[2mms[0m [1;34mDEBUG[0m created new universe: U6

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb) qu[K[Kcontinue
Continuing.
                  [2m14742[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?5, ui=U6
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?3: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U7
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?3, !6_0
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?3, b=!6_0[1;32m}[0m
                        [1;32mrelate_var_ty[0m[1;32m{[0mvar=?3, ty=!6_0[1;32m}[0m
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !6_0
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m OccursCheck aborting because self.universe_index (U2) < universe.ui (U6)
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m failed to fold !6_0
            [2m24774[0m[2mms[0m [1;34mDEBUG[0m relate_ty_ty failed (no solution)
  [2m28725[0m[2mms[0m [1;32m INFO[0m program clause = for<type> Implemented(^0.0: Eq<^0.0>)
  [1;32mresolvent_clause[0m[1;32m{[0mdb=ChalkDatabase { }, goal=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), clause=for<type> Implemented(^0.0: Eq<^0.0>)[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb) q[K
Continuing.
    [2m1421[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?0, ui=U2
    [2m1421[0m[2mms[0m [1;34mDEBUG[0m consequence=Implemented(?0: Eq<?0>), conditions=(), constraints=[]
    [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
      [1;32mrelate[0m[1;32m{[0mvariance=Invariant, a=Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>), b=Implemented(?0: Eq<?0>)[1;32m}[0m
        [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, ?0
        [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0, b=?0[1;32m}[0m
          [1;32mrelate_var_ty[0m[1;32m{[0mvar=?0, ty=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
            [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
            [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0
            [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m
              [1;32mfold_free_placeholder_lifetime[0m[1;32m{[0mui=!1_0, _outer_binder=^0[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
            [2m583[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?1, ui=U2
            [1;32mgeneralize_substitution[0m[1;32m{[0msubstitution=[?0 := ^1.0], universe_index=U2[1;32m}[0m

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
              [2m423[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?2, ui=U2
            [2m1007[0m[2mms[0m [1;34mDEBUG[0m var ?0 generalized to dyn for<type> [for<> Implemented(?2: Foo)] + '?1
            [2m1007[0m[2mms[0m [1;34mDEBUG[0m var ?0 set to dyn for<type> [for<> Implemented(?2: Foo)] + '?1
            [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=dyn for<type> [for<> Implemented(?2: Foo)] + '?1, b=dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0[1;32m}[0m
              [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?2: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<type> [for<> Implemented(?2: Foo)], b=for<type> [for<> Implemented(^1.0: Foo)][1;32m}[0m
                  [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U3

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
                  [2m343[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?3, ui=U3
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(?3: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(?3: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U4
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, ?3
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=?3[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U5
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, ?3
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=?3[1;32m}[0m
                        [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                          [1;32munify_var_var[0m[1;32m{[0ma=?2, b=?3[1;32m}[0m
                  [2m344[0m[2mms[0m [1;34mDEBUG[0m created new universe: U6

Thread 2 "test::existenti" hit Breakpoint 1, [33mchalk_solve::infer::InferenceTable<I>::new_variable[m ([36mself[m=0x7ffff7c46a80, [36mui[m=...) at [32m/home/daboross/proj/rust/chalk/chalk-solve/src/infer.rs[m:86
86	        [01;34mlet[m var [31m=[m [01;34mself[m[31m.[munify[31m.[m[01mnew_key[m[31m([mInferenceValue[31m::[m[01mUnbound[m[31m([mui[31m));[m
(gdb)
Continuing.
                  [2m694[0m[2mms[0m [1;34mDEBUG[0m created new variable, var=?4, ui=U6
                  [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                    [1;32mrelate_binders[0m[1;32m{[0mvariance=Invariant, a=for<> Implemented(?2: Foo), b=for<> Implemented(!6_0: Foo)[1;32m}[0m
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m created new universe: U7
                      [2m0[0m[2mms[0m [1;34mDEBUG[0m zip_tys Invariant, ?2, !6_0
                      [1;32mrelate_ty_ty[0m[1;32m{[0mvariance=Invariant, a=?2, b=!6_0[1;32m}[0m
                        [1;32mrelate_var_ty[0m[1;32m{[0mvar=?2, ty=!6_0[1;32m}[0m
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m relate_var_ty: universe index of var: U2
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m trying fold_with on !6_0
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m OccursCheck aborting because self.universe_index (U2) < universe.ui (U6)
                          [2m0[0m[2mms[0m [1;34mDEBUG[0m failed to fold !6_0
            [2m1704[0m[2mms[0m [1;34mDEBUG[0m relate_ty_ty failed (no solution)
[1;32mensure_root_answer[0m[1;32m{[0minitial_table=TableIndex(0), initial_answer=AnswerIndex(0)[1;32m}[0m
  [2m0[0m[2mms[0m [1;32m INFO[0m table goal = UCanonical {
      canonical: Canonical {
          value: InEnvironment {
              environment: Env([]),
              goal: Implemented(dyn for<type> [for<> Implemented(^1.0: Foo)] + '!1_0: Eq<dyn for<type> [for<> Implemented(^1.0: Foo)] + '!2_0>),
          },
          binders: [],
      },
      universes: 3,
  }
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available (or all cycles) for TableIndex(0)
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more strands available
  [2m0[0m[2mms[0m [1;34mDEBUG[0m no more solutions
test test::existential_types::dyn_lifetime_bound ... [31mFAILED(B[m

failures:

---- test::existential_types::dyn_lifetime_bound stdout ----
program { trait Foo { } trait Eq < A > { } impl < A > Eq < A > for A { } }
----------------------------------------------------------------------
goal { forall < 'a > { forall < 'b > { dyn Foo + 'a : Eq < dyn Foo + 'b > } } }
using solver: SLG { max_size: 10, expected_answers: None }
expected:
Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!2_0 }, InEnvironment { environment: Env([]), goal: '!2_0: '!1_0 }]
actual:
No possible solution
thread 'test::existential_types::dyn_lifetime_bound' panicked at 'assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
[31m<[0m[31m"[0m[1;48;5;52;31mUnique;[0m[31ms[0m[1;48;5;52;31mub[0m[31ms[0m[1;48;5;52;31mt[0m[31mi[0m[1;48;5;52;31mtution[],[0m[31ml[0m[1;48;5;52;31mif[0m[31me[0m[1;48;5;52;31mtimecon[0m[31ms[0m[1;48;5;52;31mtraints[InEnvir[0m[31mo[0m[1;48;5;52;31mnment{environment:Env([]),goa[0m[31ml[0m[1;48;5;52;31m:\'!1_0:\'!2_0},InEnvironmen[0m[31mt[0m[1;48;5;52;31m{env[0m[31mi[0m[1;48;5;52;31mr[0m[31mon[0m[1;48;5;52;31mment:Env([]),goal:\'!2_0:\'!1_0}][0m[31m"[0m
[32m>[0m[32m"[0m[1;48;5;22;32mNopo[0m[32ms[0m[32ms[0m[32mi[0m[1;48;5;22;32mb[0m[32ml[0m[32me[0m[32ms[0m[32mo[0m[32ml[0m[1;48;5;22;32mu[0m[32mt[0m[32mi[0m[32mon[0m[32m"[0m

', tests/test_util.rs:52:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::existential_types::dyn_lifetime_bound

test result: [31mFAILED(B[m. 0 passed; 1 failed; 0 ignored; 0 measured; 435 filtered out

[Thread 0x7ffff7c4b700 (LWP 47001) exited]
[Inferior 1 (process 46997) exited with code 0145]
(gdb) quit
[1m[7m%[27m[1m[0m


[0m[27m[24m[J[01;32mâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ[00m:[01;36m~chalk/[00m
$ [K[?2004heexit[?2004l


Script done on 2020-09-26 22:53:21-07:00 [COMMAND_EXIT_CODE="0"]
